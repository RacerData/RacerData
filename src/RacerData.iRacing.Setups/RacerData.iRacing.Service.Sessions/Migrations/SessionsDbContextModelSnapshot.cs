// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RacerData.iRacing.Service.Sessions.Data;

namespace RacerData.iRacing.Service.Sessions.Migrations
{
    [DbContext(typeof(SessionsDbContext))]
    partial class SessionsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.ActivityModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityType");

                    b.Property<int>("Season");

                    b.Property<DateTime>("Timestamp");

                    b.Property<long>("TrackId");

                    b.Property<long>("VehicleId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("TrackId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.DriverModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.EnvironmentModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Humidity");

                    b.Property<long>("SessionId");

                    b.Property<string>("Sky")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<float>("Temperature");

                    b.Property<float>("TrackState");

                    b.Property<float>("TrackTemperature");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.LapModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsValid");

                    b.Property<int>("LapNumber");

                    b.Property<float>("LapSpeed");

                    b.Property<float>("LapTime");

                    b.Property<int>("OverallLapNumber");

                    b.Property<long>("RunId");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.ToTable("Laps");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.RunModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DriverId");

                    b.Property<string>("Notes")
                        .HasMaxLength(255);

                    b.Property<long>("PreviousSetupId");

                    b.Property<int>("RunNumber");

                    b.Property<long>("SessionId");

                    b.Property<long>("SetupId");

                    b.Property<long>("TelemetryId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TelemetryId");

                    b.ToTable("Runs");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.SessionModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ActivityId");

                    b.Property<long>("EnvironmentId");

                    b.Property<int>("SessionType");

                    b.Property<long>("iSessionId");

                    b.Property<long>("iSubSessionId");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("EnvironmentId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.SetupModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExportHtml");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("RunId");

                    b.Property<int>("Season");

                    b.Property<byte[]>("SetupData");

                    b.Property<int>("UpdateCount");

                    b.Property<long>("VehicleId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Setups");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.TelemetryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Data");

                    b.Property<string>("FileName")
                        .HasMaxLength(255);

                    b.Property<long>("RunId");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.ToTable("Telemetry");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.TireReadingsModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ColdPsi");

                    b.Property<float>("HotPsi");

                    b.Property<int>("Position");

                    b.Property<long>("RunId");

                    b.Property<float>("TempInner");

                    b.Property<float>("TempMiddle");

                    b.Property<float>("TempOuter");

                    b.Property<float>("WearInner");

                    b.Property<float>("WearMiddle");

                    b.Property<float>("WearOuter");

                    b.HasKey("Id");

                    b.HasIndex("RunId");

                    b.ToTable("TireReadings");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.TrackModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Banking");

                    b.Property<float>("Length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.VehicleModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.ActivityModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.TrackModel", "Track")
                        .WithMany("Activities")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.VehicleModel", "Vehicle")
                        .WithMany("Activities")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.EnvironmentModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.SessionModel", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.LapModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.RunModel", "Run")
                        .WithMany("Laps")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.RunModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.DriverModel", "Driver")
                        .WithMany("Runs")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.SessionModel", "Session")
                        .WithMany("Runs")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.TelemetryModel", "Telemetry")
                        .WithMany()
                        .HasForeignKey("TelemetryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.SessionModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.ActivityModel", "Activity")
                        .WithMany("Sessions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.EnvironmentModel", "Environment")
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.SetupModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.RunModel", "Run")
                        .WithMany()
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.VehicleModel", "Vehicle")
                        .WithMany("Setups")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.TelemetryModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.RunModel", "Run")
                        .WithMany()
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RacerData.iRacing.Service.Sessions.Data.TireReadingsModel", b =>
                {
                    b.HasOne("RacerData.iRacing.Service.Sessions.Data.RunModel", "Run")
                        .WithMany("TireReadings")
                        .HasForeignKey("RunId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
